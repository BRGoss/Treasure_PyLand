{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fnil\fcharset0 Consolas;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue120;\red234\green234\blue234;\red107\green0\blue1;
\red234\green234\blue234;\red0\green0\blue0;\red37\green127\blue159;\red107\green0\blue1;\red37\green127\blue159;
}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl520

\f0\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 /*\
Abraham Ewnetu\
Puzzle Idea\
This program helps to convert binary number to decimal number.\
\pard\pardeftab720\sl520
\cf4 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 Binary number    Decimal number         \
0000                 0\
0001                 1\
0010                 2\
0011                 3\cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\sl520
\cf2 */\
\
public\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6  \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 class\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6  \cf7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 BinaryToDecimalConverter\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6  \{\
 \
  \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 public\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6  \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 int\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6  \cf7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Convert\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 (\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 int\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6  binary)\{\
 \
    \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 int\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6  \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 decimalNumber\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6  = \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 0\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ;\
    \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 int\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6  thePowerNumber = \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 0\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ;\
    \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 while\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 (\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 true\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 )\{\
      \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 if\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 (binary == \cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 0\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 )\{\
        \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 break\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ;\
      \} \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 else\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6  \{\
          \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 int\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6  number = binary%\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 10\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ;\
          \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 decimalNumber\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6  += number*\cf7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Math\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 .pow(\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 2\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 , thePowerNumber);\
          binary = binary/\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 10\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ;\
          thePowerNumber++;\
       \}\
    \}\
    \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 return\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6  \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 decimalNumber\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ;\
  \}\
 \
  \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 public\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6  \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 static\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6  \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 void\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6  main(\cf7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 String\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6  args[])\{\
    \cf9 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 BinaryToDecimalConverter\cf6 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6  bdConverter = \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 new\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6  \cf9 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 BinaryToDecimalConverter\cf6 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ();\
    \cf7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 System\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 .\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 out\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 .println(\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 "\cf4 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 0000\cf8 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  --> " \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 + \cf0 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 bdConverter\cf6 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 .\cf7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Convert\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 (\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 0000\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ));\
    \cf7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 System\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 .\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 out\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 .println(\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 "\cf4 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 0001\cf8 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  --> " \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 + \cf0 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 bdConverter\cf6 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 .\cf7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Convert\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 (\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 0001\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ));\
    \cf7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 System\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 .\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 out\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 .println(\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 "\cf4 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 0010\cf8 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  --> " \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 + \cf0 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 bdConverter\cf6 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 .\cf7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 Convert\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 (\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 0010\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ));\
    \cf7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 System\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 .\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 out\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 .println(\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 "\cf4 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 0011\cf8 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8  --> " \cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 + \cf0 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 bdConverter\cf6 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 .\cf7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 convert\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 (\cf8 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 0011\cf6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 ));\
  \}\
\}\
\
*************************************************\
Input              Output\
\pard\pardeftab720\sl520
\cf4 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 0000  \'97->            0\
0001 \'97->             1\
0010 -->             2\
0011 \'97->             3}